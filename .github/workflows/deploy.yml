name: Deploy to AWS Elastic Beanstalk

# Specify this workflow can be called by another workflow using workflow_call: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_call
on:
  workflow_call:
    # Input variables
    inputs:
      APP_NAME:
        required: true
        type: string
      APP_NAME_VERSION:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Use the main environment from GitHub to load environment variables
    environment: main
    steps:
    # Checkout repository
    - name: Checkout Repository
      uses: actions/checkout@v2

    # Configure AWS Credentials for this workflow
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
      # Continute on error to verify account worked, if not, credentials are probably wrong
      continue-on-error: true
    # This step will print the account used, if it is not configured correctly, it will not show an account,
    # meaning the credentials are probably invalid
    - name: Verify AWS Credentials
      run: |
        aws sts get-caller-identity
    
    # Step to get the environment url of the AWS EB environment (=public URL used) and save it for later jobs/steps
    # Firstly, it sets the deployment environment URLs for the frontend and backend. It also sets other environment variables, 
    # such as the AWS Cognito callback and logout URLs.
    - name: Get Deployed Application Environment URLs
      run: |
        PUBLIC_APP_DOMAIN=$(aws elasticbeanstalk describe-environments \
          --application-name "${{ vars.EB_APP_NAME }}" \
          --environment-names "${{ vars.EB_ENV_NAME }}" \
          --query "Environments[0].CNAME" \
          --output text)

        echo "Public App Domain: $PUBLIC_APP_DOMAIN"
        echo "PUBLIC_APP_URL=http://$PUBLIC_APP_DOMAIN" >> $GITHUB_ENV
        echo "DEPLOYED_BACKEND_URL=http://$PUBLIC_APP_DOMAIN:${{ vars.API_PORT }}${{ vars.API_VERSION }}" >> $GITHUB_ENV
        
        echo "DEPLOYED_CALLBACK_URL_COGNITO=http://$PUBLIC_APP_DOMAIN/auth/callback" >> $GITHUB_ENV
        echo "DEPLOYED_LOGOUT_URL_COGNITO=http://$PUBLIC_APP_DOMAIN/auth/logout" >> $GITHUB_ENV
    # Step to confirm variables (can only use variables saved to $GITHUB_ENV in a new step)
    - name: Print Application Environment Variables
      run: |
        echo "Public App URL: $PUBLIC_APP_URL"
        echo "Deployed Backend URL: $DEPLOYED_BACKEND_URL"
        echo "Deployed Cognito callback URL: $DEPLOYED_CALLBACK_URL_COGNITO"
        echo "Deployed Cognito logout URL: $DEPLOYED_LOGOUT_URL_COGNITO"

    # Set callback and logout URLs in Cognito user pool. This adds localhost (default) and deployed URLs 
    # to the user pool. It uses JSON format, such as \"\" to correctly set the values
    # You can view the callback and logout URLs in the AWS Cognito user pool in Applications > App Clients > your app client > Login pages.
    - name: Set Callback and Logout URLs in AWS Cognito User Pool
      run: |
        aws cognito-idp update-user-pool-client \
          --user-pool-id ${{ vars.COGNITO_USER_POOL_ID }} \
          --client-id ${{ vars.COGNITO_APP_CLIENT_ID }} \
          --callback-urls "[\"$DEPLOYED_CALLBACK_URL_COGNITO\", \"${{ vars.FRONTEND_URL }}/auth/callback\"]" \
          --logout-urls "[\"$DEPLOYED_LOGOUT_URL_COGNITO\", \"${{ vars.FRONTEND_URL }}/auth/logout\"]"

    # Manually create a .env file in this job with the environment variables
    # > creates (or overwrites) the file .env, and >> appends to the file (adds content to an existing file)
    # Include additional variables for AWS EB, such as S3 and Docker Hub vars for authentication
    # Use the AWS EB domain URL for the frontend and backend url env vars now instead of localhost.
    # Set next js public environment variables for the frontend to connect to the deployed backend
    - name: Create .env file
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
        echo "DOCKER_ACCESS_TOKEN=${{ secrets.DOCKER_ACCESS_TOKEN }}" >> .env
        echo "API_NAME=${{ vars.API_NAME }}" >> .env
        echo "API_PORT=${{ vars.API_PORT }}" >> .env
        echo "API_VERSION=${{ vars.API_VERSION }}" >> .env
        echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}" >> .env
        echo "BACKEND_URL=${{ vars.BACKEND_URL }}" >> .env
        echo "VEHICLE_URL=${{ vars.VEHICLE_URL }}" >> .env
        echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" >> .env
        echo "COGNITO_APP_CLIENT_ID=${{ vars.COGNITO_APP_CLIENT_ID }}" >> .env
        echo "COGNITO_USER_POOL_ID=${{ vars.COGNITO_USER_POOL_ID }}" >> .env
        echo "COGNITO_DOMAIN=${{ vars.COGNITO_DOMAIN }}" >> .env
        echo "NEXT_PUBLIC_FRONTEND_URL=$PUBLIC_APP_URL" >> .env
        echo "NEXT_PUBLIC_BACKEND_FULL_URL=$DEPLOYED_BACKEND_URL" >> .env
        echo "NEXT_PUBLIC_AWS_REGION=${{ vars.AWS_REGION }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_AUTHORITY=${{ vars.NEXT_PUBLIC_COGNITO_AUTHORITY }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_APP_CLIENT_ID=${{ vars.COGNITO_APP_CLIENT_ID }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_DOMAIN=${{ vars.COGNITO_DOMAIN }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_REDIRECT_SIGN_IN=$DEPLOYED_CALLBACK_URL_COGNITO" >> .env
        echo "NEXT_PUBLIC_COGNITO_REDIRECT_SIGN_OUT=$DEPLOYED_LOGOUT_URL_COGNITO" >> .env
        
    # Move infrastructure/extension folder to the root so that it is added in the root of the source bundle (required by AWS)
    # This is not done in the project structure since it is a more logical place in the infrastructure folder
    # More folders, such as .ebextensions can be added accordingly
    - name: Move infrastructure/extension Folders to the Root
      run: |
        mv infrastructure/extensions/.platform .platform
    # Create a zip of the application, excluding not necessary files, such as .gitignore and node_modules
    # This command now only adds the specified files to avoid unnecessary files
    - name: Package Application with Docker Compose
      run: |
        zip -r "${{ inputs.APP_NAME }}.zip" .env docker-compose.yml .platform/
    
    # Delete the .env file just to be sure (probably also done automatically, but for security reasons manually delete it as well)
    - name: Delete .env File After Use
      run: rm -f .env
    
    # Upload the application to S3 bucket (use the name of the bucket created with Terraform)
    # First save variable for this workflow and then upload to S3
    - name: Upload Application to S3
      run: |
        aws s3 cp "${{ inputs.APP_NAME }}.zip" "s3://${{ vars.S3_BUCKET_NAME }}/${{ inputs.APP_NAME_VERSION }}.zip"
    
    # Deploy application to an existing AWS EB application
    - name: Deploy Application to AWS Elastic Beanstalk
      run: |
        aws elasticbeanstalk create-application-version --application-name "${{ vars.EB_APP_NAME }}" \
          --version-label "${{ inputs.APP_NAME_VERSION }}" \
          --source-bundle S3Bucket="${{ vars.S3_BUCKET_NAME }}",S3Key="${{ inputs.APP_NAME_VERSION }}.zip"

        aws elasticbeanstalk update-environment --environment-name ${{ vars.EB_ENV_NAME }} \
          --version-label "${{ inputs.APP_NAME_VERSION }}"