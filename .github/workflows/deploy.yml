name: Deploy to AWS Elastic Beanstalk

# Specify this workflow can be called by another workflow using workflow_call: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_call
on:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    # Configure AWS Credentials for this workflow
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
      # Continute on error to verify account worked, if not, credentials are probably wrong
      continue-on-error: true
    # This step will print the account used, if it is not configured correctly, it will not show an account,
    # meaning the credentials are probably invalid
    - name: Verify AWS Credentials
      run: |
        aws sts get-caller-identity

    # Manually create a .env file in this job with the environment variables
    # > creates (or overwrites) the file .env, and >> appends to the file (adds content to an existing file)
    # Include additional variables for AWS EB, such as S3 and Docker Hub vars for authentication
    # Use the AWS EB domain URL for the frontend and backend url env vars now instead of localhost.
    # Set next js public environment variables for the frontend to connect to the deployed backend
    - name: Create .env file
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "FACTOR=${{ secrets.FACTOR }}" >> .env
        echo "ROLE=${{ secrets.ROLE }}" >> .env
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
        echo "DOCKER_ACCESS_TOKEN=${{ secrets.DOCKER_ACCESS_TOKEN }}" >> .env
        echo "API_NAME=${{ vars.API_NAME }}" >> .env
        echo "API_PORT=${{ vars.API_PORT }}" >> .env
        echo "API_VERSION=${{ vars.API_VERSION }}" >> .env
        echo "FRONTEND_URL=${{ vars.FRONTEND_URL }}" >> .env
        echo "BACKEND_URL=${{ vars.BACKEND_URL }}" >> .env
        echo "VEHICLE_URL=${{ vars.VEHICLE_URL }}" >> .env
        echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" >> .env
        echo "NEXT_PUBLIC_FRONTEND_URL=$PUBLIC_APP_URL" >> .env
        echo "NEXT_PUBLIC_BACKEND_FULL_URL=$DEPLOYED_BACKEND_URL" >> .env
        
    # Move infrastructure/extension folder to the root so that it is added in the root of the source bundle (required by AWS)
    # This is not done in the project structure since it is a more logical place in the infrastructure folder
    # More folders, such as .ebextensions can be added accordingly
    - name: Move infrastructure/extension Folders to the Root
      run: |
        mv infrastructure/extensions/.platform .platform
    # Create a zip of the application, excluding not necessary files, such as .gitignore and node_modules
    # This command now only adds the specified files to avoid unnecessary files
    - name: Package Application with Docker Compose
      run: |
        zip -r "${{ env.APP_NAME }}.zip" .env docker-compose.yml .platform/
    
    # Delete the .env file just to be sure (probably also done automatically, but for security reasons manually delete it as well)
    - name: Delete .env File After Use
      run: rm -f .env
    
    # Upload the application to S3 bucket (use the name of the bucket created with Terraform)
    # First save variable for this workflow and then upload to S3
    - name: Upload Application to S3
      run: |
        aws s3 cp "${{ env.APP_NAME }}.zip" "s3://${{ vars.S3_BUCKET_NAME }}/${{ env.APP_NAME_VERSION }}.zip"
    
    # Deploy application to an existing AWS EB application
    - name: Deploy Application to AWS Elastic Beanstalk
      run: |
        aws elasticbeanstalk create-application-version --application-name "${{ vars.EB_APP_NAME }}" \
          --version-label "${{ env.APP_NAME_VERSION }}" \
          --source-bundle S3Bucket="${{ vars.S3_BUCKET_NAME }}",S3Key="${{ env.APP_NAME_VERSION }}.zip"

        aws elasticbeanstalk update-environment --environment-name ${{ vars.EB_ENV_NAME }} \
          --version-label "${{ env.APP_NAME_VERSION }}"