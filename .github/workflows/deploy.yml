name: Deploy to AWS Elastic Beanstalk

# Specify this workflow can be called by another workflow using workflow_call: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_call
on:
  workflow_call:
    # Input variables
    inputs:
      APP_NAME:
        required: true
        type: string
      APP_NAME_VERSION:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Use the main environment from GitHub to load environment variables
    environment: main
    # Use strategy to run this step multiple times with the possible services
    # Documentation: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow
    strategy:
      matrix:
        service: [backend, frontend]  # Runs for both services
    steps:
    # Checkout repository
    - uses: actions/checkout@v2

    # Configure AWS Credentials for this workflow
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
      # Continute on error to verify account worked, if not, credentials are probably wrong
      continue-on-error: true
    # This step will print the account used, if it is not configured correctly, it will not show an account,
    # meaning the credentials are probably invalid
    - name: Verify AWS Credentials
      run: |
        aws sts get-caller-identity
    
    # Step to set EB_ENV_NAME environment variable (the current EB env name)
    - name: Set EB_ENV_NAME and Compose File and Other Variables
      # This will set a variable in the $GITHUB_ENV file, which is available within this specific job 
      run: |
        # Set correct version label including the name of the service to avoid overlaps
        if [ "${{ matrix.service }}" == "frontend" ]; then
          echo "CURRENT_APP_VERSION=${{ inputs.APP_NAME_VERSION }}-fe" >> $GITHUB_ENV
        else
          echo "CURRENT_APP_VERSION=${{ inputs.APP_NAME_VERSION }}-be" >> $GITHUB_ENV
        fi

        # Determine the correct EB environment name
        if [ "${{ matrix.service }}" == "frontend" ]; then
          echo "EB_ENV_NAME=${{ vars.EB_ENV_NAME_PREFIX }}-fe" >> $GITHUB_ENV
        else
          echo "EB_ENV_NAME=${{ vars.EB_ENV_NAME_PREFIX }}-be" >> $GITHUB_ENV
        fi
        
        # Determine the correct Docker Compose file
        if [ "${{ matrix.service }}" == "frontend" ]; then
          echo "COMPOSE_FILE=${{ matrix.service }}/docker-compose.yml" >> $GITHUB_ENV
        else
          echo "COMPOSE_FILE=${{ matrix.service }}/docker-compose.yml" >> $GITHUB_ENV
        fi
    # Step to confirm EB_ENV_NAME
    - name: Print EB_ENV_NAME and Compose File
      run: |
        echo "Deploying App Version: $CURRENT_APP_VERSION"
        echo "Deploying to Elastic Beanstalk Environment: $EB_ENV_NAME"
        echo "Using Compose File: $COMPOSE_FILE"
    
    # Step to get the environment urls and verify them for later jobs/steps
    # This sets the deployment environment URLs for the frontend using Cognito, such as the AWS Cognito callback and logout URLs.
    # The callback and logout urls are done with https and the Route 53 domain name, however, the frontend and backend urls
    # are done with the domain of the AWS EB environment, since this is better for internal communication, this can be over http and the domain of EB.
    - name: Get Deployed Application Environment URLs
      run: |
        echo "DEPLOYED_CALLBACK_URL_COGNITO=${{ vars.DEPLOYED_FE_APP_DOMAIN_URL }}/auth/callback" >> $GITHUB_ENV
        echo "DEPLOYED_LOGOUT_URL_COGNITO=${{ vars.DEPLOYED_FE_APP_DOMAIN_URL }}/auth/logout" >> $GITHUB_ENV

        echo "DEPLOYED_FULL_BACKEND_URL=${{ vars.DEPLOYED_BE_APP_DOMAIN_URL }}${{ vars.API_VERSION }}" >> $GITHUB_ENV
    # Step to confirm variables (can only use variables saved to $GITHUB_ENV in a new step)
    - name: Print Application Environment Variables
      run: |
        echo "Deployed Backend URL: $DEPLOYED_FULL_BACKEND_URL"
        echo "Deployed Cognito callback URL: $DEPLOYED_CALLBACK_URL_COGNITO"
        echo "Deployed Cognito logout URL: $DEPLOYED_LOGOUT_URL_COGNITO"
        
    # Manually create a .env file in this job with the environment variables
    # > creates (or overwrites) the file .env, and >> appends to the file (adds content to an existing file)
    # Include additional variables for AWS EB, such as S3 and Docker Hub vars for authentication
    # Use the AWS EB domain URL for the frontend and backend url env vars now instead of localhost.
    # Set next js public environment variables for the frontend to connect to the deployed backend
    - name: Create .env file (backend)
      if: matrix.service == 'backend'
      run: |
        # General environment variables
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
        echo "DOCKER_ACCESS_TOKEN=${{ secrets.DOCKER_ACCESS_TOKEN }}" >> .env
        echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" >> .env
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AWS_REGION=${{ vars.AWS_REGION }}" >> .env
        # Specific backend environment variables
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "API_NAME=${{ vars.API_NAME }}" >> .env
        echo "API_PORT=${{ vars.API_PORT }}" >> .env
        echo "API_VERSION=${{ vars.API_VERSION }}" >> .env
        echo "FRONTEND_URL=${{ vars.DEPLOYED_FE_APP_DOMAIN_URL }}" >> .env
        echo "BACKEND_URL=$DEPLOYED_FULL_BACKEND_URL" >> .env
        echo "VEHICLE_URL=${{ vars.VEHICLE_URL }}" >> .env
        echo "COGNITO_APP_CLIENT_ID=${{ vars.COGNITO_APP_CLIENT_ID }}" >> .env
        echo "COGNITO_USER_POOL_ID=${{ vars.COGNITO_USER_POOL_ID }}" >> .env
        echo "COGNITO_DOMAIN=${{ vars.COGNITO_DOMAIN }}" >> .env
    # Create a different .env file for the frontend
    - name: Create .env file (frontend)
      if: matrix.service == 'frontend'
      run: |
        # General environment variables
        echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
        echo "DOCKER_ACCESS_TOKEN=${{ secrets.DOCKER_ACCESS_TOKEN }}" >> .env
        echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" >> .env
        # Specific frontend environment variables
        echo "NEXT_PUBLIC_FRONTEND_URL=${{ vars.DEPLOYED_FE_APP_DOMAIN_URL }}" >> .env
        echo "NEXT_PUBLIC_BACKEND_FULL_URL=$DEPLOYED_FULL_BACKEND_URL" >> .env
        echo "NEXT_PUBLIC_AWS_REGION=${{ vars.AWS_REGION }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_AUTHORITY=${{ vars.NEXT_PUBLIC_COGNITO_AUTHORITY }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_APP_CLIENT_ID=${{ vars.COGNITO_APP_CLIENT_ID }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_DOMAIN=${{ vars.COGNITO_DOMAIN }}" >> .env
        echo "NEXT_PUBLIC_COGNITO_REDIRECT_SIGN_IN=$DEPLOYED_CALLBACK_URL_COGNITO" >> .env
        echo "NEXT_PUBLIC_COGNITO_REDIRECT_SIGN_OUT=$DEPLOYED_LOGOUT_URL_COGNITO" >> .env

    # Move infrastructure/extension folder to the root so that it is added in the root of the source bundle (required by AWS)
    # This is not done in the project structure since it is a more logical place in the infrastructure folder
    # More folders, such as .ebextensions can be added accordingly. The cp command copies it and places it in a new location.
    # The COMPOSE_FILE is also moved to the root, so that it is also present at the root of the zip
    - name: Move infrastructure/extension Folders to the Root
      run: |
        # Use -r (recursive) flag to copy a directory and all its contents
        cp -r infrastructure/extensions/.platform .platform
        cp $COMPOSE_FILE ./docker-compose.yml
    # Create a zip of the application, excluding not necessary files, such as .gitignore and node_modules
    # This command now only adds the specified files to avoid unnecessary files
    # Do this by using docker-compose.yml file just moved to the root in the above step to ensure the zip is 
    # created in the root and uses the compose file from the current serivce
    - name: Package Application with Docker Compose
      run: |
        zip -r "$CURRENT_APP_VERSION.zip" .env docker-compose.yml .platform/
    
    # Delete the .env file just to be sure (probably also done automatically, but for security reasons manually delete it as well)
    - name: Delete .env File After Use
      run: rm -f .env
    
    # Upload the application to S3 bucket (use the name of the bucket created with Terraform)
    # First save variable for this workflow and then upload to S3
    - name: Upload Application to S3
      run: |
        aws s3 cp "$CURRENT_APP_VERSION.zip" "s3://${{ vars.S3_BUCKET_NAME }}/$CURRENT_APP_VERSION.zip"
    
    # Deploy application to an existing AWS EB application
    - name: Deploy Application to AWS Elastic Beanstalk
      run: |
        aws elasticbeanstalk create-application-version --application-name "${{ vars.EB_APP_NAME }}" \
          --version-label "$CURRENT_APP_VERSION" \
          --source-bundle S3Bucket="${{ vars.S3_BUCKET_NAME }}",S3Key="$CURRENT_APP_VERSION.zip"

        aws elasticbeanstalk update-environment --environment-name $EB_ENV_NAME \
          --version-label "$CURRENT_APP_VERSION"