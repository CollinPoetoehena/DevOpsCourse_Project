# Old deploy job where environment variables were added to AWS EB, but that did not work fully, and secrets were shown in the confuration of the AWS EB.
# The the variables were passed accordingly in docker-compose.yml, such as only the ones needed for each application

name: Deploy to AWS Elastic Beanstalk

# Specify this workflow can be called by another workflow using workflow_call: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#workflow_call
on:
  workflow_call:
    # Input variables
    inputs:
      APP_NAME:
        required: true
        type: string
      APP_NAME_VERSION:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Use the main environment from GitHub to load environment variables
    environment: main
    steps:
    # Checkout repository
    - name: Checkout Repository
      uses: actions/checkout@v2

    # Configure AWS Credentials for this workflow
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
      # Continute on error to verify account worked, if not, credentials are probably wrong
      continue-on-error: true
    # This step will print the account used, if it is not configured correctly, it will not show an account,
    # meaning the credentials are probably invalid
    - name: Verify AWS Credentials
      run: |
        aws sts get-caller-identity
    
    # Step to get the environment url of the AWS EB environment (=public URL used) and save it for later jobs/steps
    - name: Get Deployed Application Environment URL
      run: |
        PUBLIC_APP_DOMAIN=$(aws elasticbeanstalk describe-environments \
          --application-name "${{ vars.EB_APP_NAME }}" \
          --environment-names "${{ vars.EB_ENV_NAME }}" \
          --query "Environments[0].CNAME" \
          --output text)

        echo "Public App Domain: $PUBLIC_APP_DOMAIN"
        echo "PUBLIC_APP_URL=http://$PUBLIC_APP_DOMAIN" >> $GITHUB_ENV
        echo "DEPLOYED_BACKEND_URL=http://$PUBLIC_APP_DOMAIN:${{ vars.API_PORT }}${{ vars.API_VERSION }}" >> $GITHUB_ENV  
    # Step to confirm variables (can only use variables saved to $GITHUB_ENV in a new step)
    - name: Print Application Environment Variables
      run: |
        echo "Public App URL: $PUBLIC_APP_URL"
        echo "Deployed Backend URL: $DEPLOYED_BACKEND_URL"

    # Step to set environment variables directly in AWS EB using the AWS CLI
    # For possible configuration options (settings): https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/beanstalk-environment-configuration-advanced.html
    # Specifically: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html
    # First the variables are formatted as JSON, as this allows multiple variables to be set with one command, without it, it would only use the first variable
    # See: https://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/update-environment.html
    - name: Apply AWS EB Environment Variables
      run: |
        ENV_SETTINGS='[
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "MONGO_URI", "Value": "${{ secrets.MONGO_URI }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "SECRET_KEY", "Value": "${{ secrets.SECRET_KEY }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "FACTOR", "Value": "${{ secrets.FACTOR }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "ROLE", "Value": "${{ secrets.ROLE }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "DOCKER_USERNAME", "Value": "${{ secrets.DOCKER_USERNAME }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "DOCKER_ACCESS_TOKEN", "Value": "${{ secrets.DOCKER_ACCESS_TOKEN }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "API_NAME", "Value": "${{ vars.API_NAME }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "API_PORT", "Value": "${{ vars.API_PORT }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "API_VERSION", "Value": "${{ vars.API_VERSION }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "FRONTEND_URL", "Value": "${{ vars.FRONTEND_URL }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "BACKEND_URL", "Value": "${{ vars.BACKEND_URL }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "VEHICLE_URL", "Value": "${{ vars.VEHICLE_URL }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "S3_BUCKET_NAME", "Value": "${{ vars.S3_BUCKET_NAME }}"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "NEXT_PUBLIC_FRONTEND_URL", "Value": "$PUBLIC_APP_URL"},
            {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "NEXT_PUBLIC_BACKEND_FULL_URL", "Value": "$DEPLOYED_BACKEND_URL"}
          ]'
        # Print the JSON for debugging
        echo "Environment settings JSON: $ENV_SETTINGS"

        # Apply the environment variables
        aws elasticbeanstalk update-environment --environment-name "${{ vars.EB_ENV_NAME }}" \
          --option-settings "$ENV_SETTINGS"
  
    # Move infrastructure/extension folder to the root so that it is added in the root of the source bundle (required by AWS)
    # This is not done in the project structure since it is a more logical place in the infrastructure folder
    # More folders, such as .ebextensions can be added accordingly
    - name: Move infrastructure/extension Folders to the Root
      run: |
        mv infrastructure/extensions/.platform .platform
    # Create a zip of the application, excluding not necessary files, such as .gitignore and node_modules
    # This command now only adds the specified files to avoid unnecessary files
    - name: Package Application with Docker Compose
      run: |
        zip -r "${{ inputs.APP_NAME }}.zip" docker-compose.yml .platform/
    
    # Upload the application to S3 bucket (use the name of the bucket created with Terraform)
    # First save variable for this workflow and then upload to S3
    - name: Upload Application to S3
      run: |
        aws s3 cp "${{ inputs.APP_NAME }}.zip" "s3://${{ vars.S3_BUCKET_NAME }}/${{ inputs.APP_NAME_VERSION }}.zip"

    # Step to wait for AWS EB environment to be in "Ready" state before applying updates (otherwise update cannot be applied)
    # This is because it takes some time to update the environment variables in the earlier step (do this directly before the deploy step
    # to optimize the waiting time). Use 10 second intervals in between checks.
    - name: Wait for AWS EB Environment to Be Ready Before Deploying
      run: |
        echo "Waiting for AWS Elastic Beanstalk environment to be in 'Ready' state..."
        while true; do
          STATUS=$(aws elasticbeanstalk describe-environments \
            --application-name "${{ vars.EB_APP_NAME }}" \
            --environment-names "${{ vars.EB_ENV_NAME }}" \
            --query "Environments[0].Status" --output text)
          echo "Current status: $STATUS"
          if [ "$STATUS" == "Ready" ]; then
            echo "AWS EB Environment is now Ready."
            break
          fi
          echo "Waiting for 10 seconds..."
          sleep 10
        done
    
    # Deploy application to an existing AWS EB application
    - name: Deploy Application to AWS Elastic Beanstalk
      run: |
        aws elasticbeanstalk create-application-version --application-name "${{ vars.EB_APP_NAME }}" \
          --version-label "${{ inputs.APP_NAME_VERSION }}" \
          --source-bundle S3Bucket="${{ vars.S3_BUCKET_NAME }}",S3Key="${{ inputs.APP_NAME_VERSION }}.zip"

        aws elasticbeanstalk update-environment --environment-name ${{ vars.EB_ENV_NAME }} \
          --version-label "${{ inputs.APP_NAME_VERSION }}"
