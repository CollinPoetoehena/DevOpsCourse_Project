name: Build Test and Push Docker
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  BE_IMAGE_NAME: rac-backend
  FE_IMAGE_NAME: rac-frontend
  DOCKER_REGISTRY: docker.io/poetoecuva

# TODO: first build and run docker and then do tests (backend with environment variables). 
# Then do docker push if tests succeed and do deployment step.

# TODO: change below to use correct docker image and correct test setup.
jobs:
  # Job to test environment variables in GitHub repository
  env-test:
    runs-on: ubuntu-latest
    # Use the backend environment from GitHub
    environment: backend
    steps:
        - name: Test Environment Variable
          run: |
            echo "API name: ${{ vars.API_NAME }}"
            echo "API version: ${{ vars.API_VERSION }}"

  # Job to build, test and push the backend Docker container
  be-build-test-push:
    runs-on: ubuntu-latest
    # Use the backend environment from GitHub
    environment: backend
    steps:
    - uses: actions/checkout@v2

    # Step to set IMAGE_TAG environment variable
    - name: Set BE_IMAGE_TAG
      # This will set a variable in the $GITHUB_ENV file, which is available within this specific job 
      run: |
        BE_IMAGE_TAG="${{ env.DOCKER_REGISTRY }}/${{ env.BE_IMAGE_NAME }}:latest"
        echo "BE_IMAGE_TAG=$BE_IMAGE_TAG" >> $GITHUB_ENV
    # Step to confirm BE_IMAGE_TAG
    - name: Print BE_IMAGE_TAG
      run: echo "Using BE_IMAGE_TAG=${BE_IMAGE_TAG}"

    # Step to login to Docker Hub
    - name: Login to Docker Container Registry
      uses: docker/login-action@v1
      with:
        # Use repository secrets from GitHub for Docker Hub username
        username: ${{ secrets.DOCKER_USERNAME }}
        # Use repository secrets from GitHub for Docker Hub access token: https://docs.docker.com/security/for-developers/access-tokens/
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    # Step to build Docker container
    - name: Build Docker Image
      run: |
        cd backend
        docker build --build-arg NAME="${BE_IMAGE_NAME}" -t "${BE_IMAGE_TAG}" .
    
    - name: Create .env file
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
        echo "FACTOR=${{ secrets.FACTOR }}" >> .env
        echo "ROLE=${{ secrets.ROLE }}" >> .env
        echo "API_NAME=RAC" >> .env
        echo "API_PORT=4001" >> .env
        echo "API_VERSION=/api/v1" >> .env
        echo "FRONTEND_URL=http://localhost:3000" >> .env
        echo "BACKEND_URL=http://localhost:4001" >> .env
        echo "VEHICLE_URL=https://vpic.nhtsa.dot.gov/api/vehicles" >> .env
    - name: Run Backend Container with Environment Variables
      run: |
        docker run -d \
          --env-file .env \
          -p 4001:4001 \
          --name rac-backend \
          ${BE_IMAGE_TAG}
    
    # # Step to run Docker container
    # - name: Run Backend Container with Environment Variables
    #   # Set environment variables manually instead of passing the .env file (not present in GitHub repo, only locally)
    #   # Names must be exactly the same as the backend/dummy.env, otherwise the variables cannot be found by the source code
    #   # Run docker in detached mode (-d) to run the container in the background
    #   # Add environment variables with -e
    #   # (Avoid comments in the below command (run), as it will break the commands and give errors)
    #   run: |
    #     docker run -d \
    #         -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
    #         -e FACTOR=${{ secrets.FACTOR }} \
    #         -e MONGO_URI=${{ secrets.MONGO_URI }} \
    #         -e ROLE=${{ secrets.ROLE }} \
    #         -e API_NAME=${{ vars.API_NAME }} \
    #         -e API_PORT=${{ vars.API_PORT }} \
    #         -e API_VERSION=${{ vars.API_VERSION }} \
    #         -e FRONTEND_URL=${{ vars.FRONTEND_URL }} \
    #         -e BACKEND_URL=${{ vars.BACKEND_URL }} \
    #         -e VEHICLE_URL=${{ vars.VEHICLE_URL }} \
    #         -p ${{ vars.API_PORT }}:${{ vars.API_PORT }} \
    #         --name ${{ env.BE_IMAGE_NAME }} \
    #         ${BE_IMAGE_TAG} 
      
    # Step to wait for the backend to be ready before running tests
    - name: Wait for Backend to Start
      run: |
        echo "Waiting for backend to be ready..."
        # 'until curl -s' silently tries to fetch the backend URL, retrying every 2 seconds 
        # and timing out after 15 seconds
        timeout 15 sh -c 'until curl -s ${{ vars.BACKEND_URL }}; do sleep 2; done'
        echo "Backend is ready!"
  
    # Step to run `npm run test` inside the running container
    - name: Run Backend Tests in Container
      run: |
        docker exec ${{ env.BE_IMAGE_NAME }} npm run test
      # TODO: remove later
      # # Explicitely pass the environment variables, ensuring they are present in Docker
      # # TODO: if this works, it also has to be done like this above and the env: has to be removed at top
      # run: |
      #   docker exec -e BACKEND_URL=${{ vars.BACKEND_URL }} \
      #               -e API_VERSION=${{ vars.API_VERSION }} \
      #               ${{ env.BE_IMAGE_NAME }} npm run test
    # If tests fail, stop execution before pushing
    - name: Fail if tests fail
      if: failure()
      run: exit 1

    # If all above steps are successful, push the image to Docker Hub
    - name: Push Image to Docker Hub Container Registry
      run: | 
          docker push "${BE_IMAGE_TAG}"